%YAML 1.1
---
# Snapcraft Recipe for GNU Hello
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft format
#   https://docs.snapcraft.io/the-snapcraft-format/8337
# * Snap Documentation
#   https://docs.snapcraft.io
# * Topics under the doc category in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft
name: hello-snapcrafters
title: GNU Hello (for snapcrafters)
summary: A familiar, friendly greeting(also a demonstration of snap packaging)
description: |
  The GNU Hello program produces a familiar, friendly greeting. Yes, this is another implementation of the classic program that prints “Hello, world!” when you run it.

  However, unlike the minimal version often seen, GNU Hello processes its argument list to modify its behavior, supports greetings in many languages, and so on. The primary purpose of GNU Hello is to demonstrate how to write other programs that do these things; it serves as a model for GNU coding standards and GNU maintainer practices.

  This snap is also a demonstration of snap packaging, to get started please refer the following ubuntu tutorial:

    Create your first snap | Ubuntu tutorials
    https://tutorials.ubuntu.com/tutorial/create-your-first-snap

  For any questions regarding of the implementation or using this snap, refer to the Snapcraft Forum:

    https://forum.snapcraft.io/

# The path of icon to represent the snap, relative to the source tree directory
# Only PNG or SVG image is supported, dimension must be greater than 256x256px
icon: snap/gui/hello-snapcrafters.png

# The license of this application, in SPDX format
# NOTE: Currently only supports SPDX 2.1 license expressions, as described in Appendix IV of
# https://spdx.org/spdx-specification-21-web-version
# Supported expressions:
# https://github.com/snapcore/snapd/blob/HEAD/spdx/licenses.go
license: GPL-3.0

# Version string just for humans, typically '1.2+git' or '1.3.2'
# The wrapping single quotes are often required to avoid the version string
# being accidentally interpreted as a YAML non-string(like '1', '1.2').
# http://yaml.org/type
# https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html#surprising-behaviour
# NOTE: This key is mutual exclusive with the `adopt-info` key
#version: Derived from the part specified by the `adopt-info` property

# (OPTIONAL) The version string can also be dynamically determined via scripting
# , in this case the value of the `version` key will be ignored (but the key is
# still required).
# NOTE: The resulting version string cannot be longer than 32 characters
#version-script: ./snap/local/utilities/set-snap-version.bash
#version-script: git -C parts/my-app-part/src describe --always --dirty --tags

# The environment this snap is based on
base: core18

# Extracting information from sources in snapcraft parts - doc
# https://forum.snapcraft.io/t/extracting-information-from-sources-in-snapcraft-parts/4642
adopt-info: hello

# Security confinement
# Use `devmode` to getting started
# Flip to `strict` once you have the right plugs and slots,
# or `classic` once you determine that strict confinement is not currently possible
confinement: strict

# Snap Grade
# Use `devel` to getting started
# Flip to `stable` once you determine that the snap is matured, only `stable` grade
# snaps can be promoted to `candidate` and `stable` channels
grade: stable

# Refer the following documentation for asserting interface plugs and slots in a security confined snap:
# Interface management - doc - snapcraft.io
# https://docs.snapcraft.io/interface-management/6154
# Supported interfaces - doc - snapcraft.io
# https://docs.snapcraft.io/supported-interfaces/7744
# Non-A/C: Non-autoconnect interface
#plugs:
  # For snaps with a graphical user interface:
  #desktop:
  #desktop-legacy:
  #x11:
  #unity7:
  #wayland:

  # Storage access
  #home:
  #removable-media: # Non-A/C

  # Network access
  #network:

#slots:

# Apps that are exposed by the snap package
# If the _app_name_ is identical with the _snap_name_ it can be directly run
# with `_snap_name_` or `snap run _snap_name_` commands, otherwise it can only be run
# via `_snap_name_._app_name_` or `snap run _snap_name_._app_name_`
apps:
  hello-snapcrafters:
    # The environment adapter style to use, `command-chain` is only supported by the `full` adapter
    adapter: full

    # The command to run the application, the value should be a *relative path* to an executable file rooted from the `prime` directory
    command: bin/hello-snapcrafters
    command-chain:
    - bin/locales-launch
    - bin/hello-launch

    # If the providing part of the app. has a desktop entry, specify its path relative to the `prime` directory.
    # If the packaging target doesn't provide a desktop entry, ignore the `desktop` key and implement a desktop entry in `/snap/gui`
    #desktop: share/applications/hello.desktop

# Run `snapcraft help sources` for supported keywords on pulling a part's source ingredients
# Run `snapcraft plugins` for supported build helper plugins
# Run `snapcraft help plugins` for supported keywords on building a part
# For `override-*` scriptlets used to modify behavior of certain part's lifecycle phase, check out:
# https://docs.snapcraft.io/scriptlets/4892
parts:
  # Assets from the snap packaging, refer each READMEs under the `snap` folder for more information
  assets:
    source: snap/local
    plugin: dump

    override-build: ./utilities/install-assets.bash

    prime:
    - -utilities
    - -patches

  locales-launch:
    plugin: nil
    stage-snaps:
    - locales-launch

    stage-packages:
    # For localedef(1)
    - libc-bin

    # For locale data used by localedef(1)
    - locales

    # All pre-generated locale data
    # DISABLED: Lots of duplicate data will be included in snap when this is staged, unless the target machine has no resource to generate them in runtime otherwise not using it
    #
    #   Lack of compiled locales breaks gettext based localisation - snapcraft - snapcraft.io
    #   https://forum.snapcraft.io/t/lack-of-compiled-locales-breaks-gettext-based-localisation/3758
    #
    #- locales-all

  hello:
    after:
    - assets

    source: git://git.savannah.gnu.org/hello.git
    source-depth: 50
    override-pull: '"${SNAPCRAFT_STAGE}"/utilities/parts-hello-override-pull.bash'
    build-packages:
    - build-essential
    - gettext
    - gperf
    - help2man
    - rsync
    - texinfo
    - wget

    plugin: autotools
    configflags:
    - --datarootdir=/snap/$SNAPCRAFT_PROJECT_NAME/current/share
    - --program-suffix=-snapcrafters

    organize:
      snap/$SNAPCRAFT_PROJECT_NAME/current: /

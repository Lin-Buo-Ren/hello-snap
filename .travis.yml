%YAML 1.1
# Currently Travis CI only conforms to v1.1 YAML spec.
# Refer https://github.com/travis-ci/travis-ci/issues/9600 for details
---
# Travis CI Configuration
# https://docs.travis-ci.com
# This file is in YAML data serialization language.
# http://yaml.org/
# This file is based on Configuration Templates for Travis CI
# https://github.com/Lin-Buo-Ren/Configuration-Templates-for-Travis-CI
## Project-specific settings
### Main programming language used in the project
### https://docs.travis-ci.com/user/languages
language: snapcraft

### Git related settings
git:
  # You may limit the depth of history cloned by Travis CI if you don't depend on it(default: 50)
  # You may also remove the depth limitation entirely by setting the `depth` key to `false
  # https://docs.travis-ci.com/user/customizing-the-build/#Git-Clone-Depth
  depth: 3
  # Travis CI clones git submodules recursively by default
  # https://docs.travis-ci.com/user/customizing-the-build/#Git-Submodules
  #submodules: false
  # Whether to download Git Large File Storage assets
  # https://docs.travis-ci.com/user/customizing-the-build/#Git-LFS-Skip-Smudge
  lfs_skip_smudge: false

## Build Environment Specification
### Whether to use faster container build(false) or flexible VM build(required)
### NOTE: `sudo` is not available in container build!
sudo: false

### Selection of ubuntu release for build environment
dist: trusty

## The Build Lifecycle
## https://docs.travis-ci.com/user/customizing-the-build/#The-Build-Lifecycle
## NOTE: Enable each phases by removing the `true` command after each key's colon

### Install/Setup any required dependencies used in continuous integration
### https://docs.travis-ci.com/user/installing-dependencies/
install:
# Setup pre-commit.com
- pip install --user pre-commit

### You can run custom commands before the script/build step
before_script:
- git diff-tree -z --no-commit-id --name-only -r HEAD | xargs --null pre-commit run --files

### Put your build scripts here
script: true

### You can remove files that are not needed for caching here
before_cache: true

### Caches non-variating contents to speed up build
cache:
  pip: true
  #directories:
  #- $HOME/.cabal

### Commands if build phase fails
after_failure: true

### Commands if build phase successes
after_success: true

### You can run custom commands before the deploy step
before_deploy: true

### You can run custom commands after the deploy step
after_deploy: true

### You can run custom commands after everything is done
after_script: true
